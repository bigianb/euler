const input = [
"#################################################################################",
"#.........#q..#.......................#.#.....................#...#.............#",
"#.#####.#.###.#.#######.#############.#.#.###################.#.#.#.#######.###.#",
"#...#...#...#.....#...#g#...........#...#.#...........#.O.#...#.#.#...#...#.#...#",
"###.#.#####.#######.#.#.#####.###.#.###.#.#####.#####.#.#.#.###.#F###.#.#.#.#T###",
"#.#.#...#...#.......#...#...#...#.#.#...#.....#...#.#.#.#...#...#...#.#.#...#...#",
"#.#.###.#.###.###########.#.#####.###.#######.#.#.#.#.#.#####.#####.#.#.#########",
"#...#...#.....#...........#.....#.#y..#.#.....#.#.#...#.....#...#...#.#.#.......#",
"#.###.#########.#####.#########.#.#.###.#.#######.#.#######.###.#.###.#.#.#####.#",
"#...#.......#...#.....#.....#.....#.#...#.#.......#.....#.#...#.#.#.#.#.......#.#",
"#.#######.#.#.#########.###.#.#####.#.#.#.###.#########.#.#.#.#.#.#.#.#########.#",
"#.#.....#.#.#.#...#.......#.#.#.#...#.#.#...#.#...#...#...#.#.#.#.#...#.#.......#",
"###.###.###.#.#.#.#.#######.#.#.#.#####.###.#.#.#.###.###.#.#.#.#.###.#.#.#####E#",
"#...#.......#...#...#...#...#...#.#.....#.#...#.#.......#.#.#.#.#...#...#...#...#",
"#.#################.###.#.#######.#.#.###.#####.#########.#.###.###.#.#####.#.###",
"#.......#.....#...#...#.#.......#.#.#...#.................#.#...#.#.#.#.....#...#",
"#.#####.#.###.#.#.###.#.#######.#.#####.#.#########.#######.#.###.#.#.#.#######.#",
"#e#...#.#.#.#.#.#.#...........#.........#.#.......#.....#...#.#...#.#.#.#.C.#...#",
"#.#.###.#.#.#.#.#.#######.#############.#.#.#####.#######.#.#.#.#.#.#.#.#.#.#.###",
"#.#.#...#...#...#...#.....#...#...#.....#.#...#.#.....#...#.#.#.#.#.#.#.#.#.#.#.#",
"#.#.#.#####.#######.#######.#.#.#.#######.###.#.#####.#.#####.#.#.#.###.#.###.#.#",
"#...#.#...#.#.....#...#...#.#...#.......#.#...#...#...#.....#.#.#.#.....#.....#.#",
"###.#.#.#.#.#####.#####.#.#.###########.#.#.###.#.#.###.###.###.#.#######.#####.#",
"#...#...#.#.........#...#...#...#.......#.#.#...#.#.#.#...#.....#...#...#...#...#",
"#.#######.#########.###.#######.#.#########.#.###.#.#.#.#####.###.#.#.#.###.#.#.#",
"#.#.#.....#.......#.#...#.......#.#.#...#...#...#...#...#...#.#...#.#.#...#.#.#.#",
"#.#.#.#####.#####.#.#.###.#######.#.#.#.#.#####.#####.###.#.###.###.#.#####.###Z#",
"#...#.........#...#...#.#.........#..k#.#.#.....#.......#.#...#...#...#.....#...#",
"###############.#.#####.#.#########.###.#.#.#############.###.###.#####.#####.#.#",
"#...N...#...#...#.#...#...#.#...#...#...#.#.............#.#.......#...#.#....b#.#",
"#.#####.#.#.#.###.###.#.###.#.#.#.###.#.#.#############.#.#########.#.#.###.###.#",
"#.#.......#.#...#.....#.#...#.#...#...#.#.#...#.......#.#...#.....#.#.#.....#...#",
"#.#########.###.#######.#.#.#.#####.###.#.#.#.#####.###.###.#.###.#.#.#######.###",
"#.#...V.#.#.H.#.#.......#.#.#.....#...#.#...#.#...#.........#...#...#.......#...#",
"#.#.###.#.###.#.#.#######.#####.#####.###.###.#.#.###.#####.###.#########.#####.#",
"#.....#.#...#.#.#.#.......#.....#...#...#.#...#.#...#.#...#.#...#.......#.....#.#",
"#.#####.#.###.#.#.#######.#.#####.#.###.###.#.#.###.###.#.###.###.#####.###.#.#.#",
"#.#.#...#..a....#...#...#...#.....#...#.#...#.#...#.....#.....#.#.....#..h..#.#.#",
"#.#.#.#############.#.#.#####.#######.#.#.#######.#############.#####.#########A#",
"#...#.................#.......#.............................X.......#...........#",
"#######################################.@.#######################################",
"#.D.....#.....#.......#.....#.........................#.....#.......#.#...#...#.#",
"#.###.#.#.#.#.#.#####.#.###.#.#.#######.#.###########.#.#.#.#.#####.#.#I#.#.#.#.#",
"#i#...#.#.#.#...#.....#.#...#.#x......#.#.#.......#...#.#.#...#.......#.#...#.#.#",
"###.###.###.#.#####.###.#.###.#######.#.#.###.###.#.#.#.#.#####.#######.#####.#.#",
"#...#.......#.#...#.#...#...#.#.#.....#.#.....#.#.#.#.#.#v....#.#...#...#d..#...#",
"#.#######.#####.#.#.#.#####.#.#.#.#####.#######.#.#.###.#####.#.#.###.###.#####.#",
"#.#.....#.#....u#.#.#...#...#...#.#.#...#.#...#...#.#...#.....#.#.#...#.........#",
"#.#.###.#.#.#####.#.###.#.#####.#.#.#.###.#.#.#.###.#.###.#####.#.#.###.#########",
"#.S.#.#.#.#.....#.#...#.#...#...#.#.#.#.#...#.....#.#...#...#.....#...#...#..s..#",
"#.###.#.#.#.#####.#.###.###.#.###.#.#.#.#.#########.#.#####.#########.###.#####.#",
"#.#...#.#.#.#.....#.#...#...#.#.#.#.#...#.....#...#...#...#n..#.P...#.#.#.......#",
"#.#.#.#.###.#.#####.#.###.###.#.#.#.###.#######.#.#####.#.###.#.###.#.#.#######.#",
"#...#.#.....#.....#.#.#...#.....#.#...#.#...#...#.....#.#...#.#.#.#...#.......#.#",
"#####.###########.#.#.###.#######.#.###.#.#.#.#######.#.###.#.#.#.#########.#.#U#",
"#.....#.......#...#.#...#.#.......#.....#.#...#.....#...#.....#.#...........#.#.#",
"#.#########.#.#.###.###.#.#.#######.#####.#####.#.###.#####.###.#.#######.#####.#",
"#.#.......#.#.#.#..w#...#...#...#...#.K.#...#.#.#.....#...#.#...#.#.#...#.#.....#",
"#.#.#####.#.#.#.###.#.#######.###.###.#.#.#.#.#.#######.#.###.###.#.#.#.#.#.#####",
"#...#..p....#.#...#.#...#...#...#.....#.#.#.#.#...#.....#...#...#.#...#...#.....#",
"#.###########.###.#.###.#.#.#R#.#######.#.#.#.###.#.#######.###.#.###.#########.#",
"#.#.......#.....#.#.#...#.#.#.#.......#.#.#.#.....#.#.#.....#.#.#...#.#.......#.#",
"#.#.#####.#######.#.#####M###.#.#####.#.#.#.###.###.#.#.#####.#W#.#.###.#.###.#.#",
"#.#.#.#.........#.#.#...#...#.#...#..m#.#.#...#.#...#.#.#...#j..#.#.#...#.#...#.#",
"#.#.#.#.#######.#.#.#.#.###.#.###.#####.#.###.###.###.#.#.#.#######.#.###.#.###.#",
"#.#.#.....#...#...#...#...#...#...#.....#.#.#.....#...#...#.........#.#...#.Q.#.#",
"#.#.#####.#.#.###########.#.###.#.#.#####.#.#######.#.#####.###.#####.#.#.#####.#",
"#.#.....#.#.#.........#...#.#...#.#.#...#...#.......#.#.#...#.#.#.G...#.#.#...#.#",
"#######.###.#########.#J#####L###.#.#.#.###.###.#.###.#.#.###.#.#.#####.###.#.#.#",
"#.....#.......#...#...#.#...#.#...#...#.#.#...#.#.#.....#.#...#.#.#...#.....#.Y.#",
"#B###.#######.###.#.###.#.#.#.#########.#.###.#.#.#######.#.###.#.#.#############",
"#.#...#...#...#...#...#l..#...#.....#...#.#...#.#.......#.#.....#.#.........#...#",
"#.###.#.#.#.###.#####.#######.#.###.#.###.#.###.#######.#.#####.#.#.###.###.#.###",
"#...#...#.#.....#...#...#...#.#.#.#...#.#.#.#...#.......#.....#.#.#...#.#...#f..#",
"#.#.#####.#.#####.#.###.#.#.#.#.#.#####.#.#.#####.#####.#####.###.#####.#.#####.#",
"#.#.....#.#.#.....#.#...#r#...#.....#...#.#.....#.#...#.#...#..o#.#.....#.#.....#",
"#.#####.#.###.#####.#.#.###########.#.#.#.#####.#.#.###.###.###.#.#.#####.#.#.#.#",
"#...#.#.#.....#z..#...#.#.....#.....#.#.#c....#.#.#...#.....#...#...#....t#.#.#.#",
"###.#.#.#######.#.#######.###.#.#######.#.#.###.#.#.#.#####.#.#######.#######.#.#",
"#.....#.........#...........#...........#.#.......#.#.......#.................#.#",
"#################################################################################"
];

/*
Shortest paths are 136 steps;
one is: a, f, b, j, g, n, h, d, l, o, e, p, c, i, k, m
*/
const example136 = [
"#################",
"#i.G..c...e..H.p#",
"########.########",
"#j.A..b...f..D.o#",
"########@########",
"#k.E..a...g..B.n#",
"########.########",
"#l.F..d...h..C.m#",
"#################"
];

function findStart(inputMap)
{
    let x=0;
    let y=0;
    while (y < inputMap.length){
        let row = inputMap[y];
        for (x=0; x<row.length; ++x){
            if (row[x] == '@'){
                return {x, y};
            }
        }
        ++y;
    }

    return {x, y}
}

function findAllKeys(inputMap)
{
    let keys = [];
    let x=0;
    let y=0;
    while (y < inputMap.length){
        let row = inputMap[y];
        for (x=0; x<row.length; ++x){
            if(/[a-z]/.test(row[x])){
                keys.push(row[x]);
            }
        }
        ++y;
    }

    return keys;
}

function findNeighbours(pos, inputMap)
{
    let neighbours = [];

    if (pos.y > 0 && inputMap[pos.y-1][pos.x] != '#'){
        neighbours.push({x: pos.x, y: pos.y-1})
    }
    if (pos.y+1 < inputMap.length && inputMap[pos.y+1][pos.x] != '#'){
        neighbours.push({x: pos.x, y: pos.y+1})
    }
    if (pos.x > 0 && inputMap[pos.y][pos.x-1] != '#'){
        neighbours.push({x: pos.x-1, y: pos.y})
    }
    if (pos.x+1 < inputMap[pos.y].length && inputMap[pos.y][pos.x+1] != '#'){
        neighbours.push({x: pos.x+1, y: pos.y})
    }
    return neighbours;
}

function printPos(pos)
{
    return "" + pos.x + "," + pos.y;
}

// Given a start position, a set of held keys and an inputMap,
// return the keys we can reach and the minimum distance to each one.
function findAvailableKeys(start, keys, inputMap, visited={}, distance=0)
{
    // track where we have been so we don't backtrack.
    visited[printPos(start)] = distance;

    // Keep searching until we hit a wall or a locked door.
    let neighbours = findNeighbours(start, inputMap);
    for (let neighbour of neighbours){
        if (!(printPos(neighbour) in visited)){
            let el = inputMap[neighbour.y][neighbour.x];
            // check lowercase letter for key
            if(/[a-z]/.test(el)){
                keys[el] = distance+1;
            }
            
            let keepGoing = true;
            // check uppercase letter for door
            if(/[A-Z]/.test(el)){
                // Check if we have the key
                if (!(el.toLowerCase() in keys)){
                    keepGoing = false;
                }
            }
            if (keepGoing){
                keys = findAvailableKeys(neighbour, keys, inputMap, visited, distance+1);
            }
        }
    }

    return keys;
}

// Solves the given map and returns the minimum steps.
function solve(inputMap)
{
    let allKeys = findAllKeys(inputMap);
    console.log("found " + allKeys.length + " keys");

    let start = findStart(inputMap);
    console.log("start = " + printPos(start));
    
    let keys = {};
    keys = findAvailableKeys(start, keys, inputMap);
    console.log(keys);

    return 0;
}

let minSteps = solve(example136);
if (minSteps != 136){
    console.error("Expected 136 steps but got " + minSteps);
}
