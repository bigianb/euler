const input = [
"#################################################################################",
"#.........#q..#.......................#.#.....................#...#.............#",
"#.#####.#.###.#.#######.#############.#.#.###################.#.#.#.#######.###.#",
"#...#...#...#.....#...#g#...........#...#.#...........#.O.#...#.#.#...#...#.#...#",
"###.#.#####.#######.#.#.#####.###.#.###.#.#####.#####.#.#.#.###.#F###.#.#.#.#T###",
"#.#.#...#...#.......#...#...#...#.#.#...#.....#...#.#.#.#...#...#...#.#.#...#...#",
"#.#.###.#.###.###########.#.#####.###.#######.#.#.#.#.#.#####.#####.#.#.#########",
"#...#...#.....#...........#.....#.#y..#.#.....#.#.#...#.....#...#...#.#.#.......#",
"#.###.#########.#####.#########.#.#.###.#.#######.#.#######.###.#.###.#.#.#####.#",
"#...#.......#...#.....#.....#.....#.#...#.#.......#.....#.#...#.#.#.#.#.......#.#",
"#.#######.#.#.#########.###.#.#####.#.#.#.###.#########.#.#.#.#.#.#.#.#########.#",
"#.#.....#.#.#.#...#.......#.#.#.#...#.#.#...#.#...#...#...#.#.#.#.#...#.#.......#",
"###.###.###.#.#.#.#.#######.#.#.#.#####.###.#.#.#.###.###.#.#.#.#.###.#.#.#####E#",
"#...#.......#...#...#...#...#...#.#.....#.#...#.#.......#.#.#.#.#...#...#...#...#",
"#.#################.###.#.#######.#.#.###.#####.#########.#.###.###.#.#####.#.###",
"#.......#.....#...#...#.#.......#.#.#...#.................#.#...#.#.#.#.....#...#",
"#.#####.#.###.#.#.###.#.#######.#.#####.#.#########.#######.#.###.#.#.#.#######.#",
"#e#...#.#.#.#.#.#.#...........#.........#.#.......#.....#...#.#...#.#.#.#.C.#...#",
"#.#.###.#.#.#.#.#.#######.#############.#.#.#####.#######.#.#.#.#.#.#.#.#.#.#.###",
"#.#.#...#...#...#...#.....#...#...#.....#.#...#.#.....#...#.#.#.#.#.#.#.#.#.#.#.#",
"#.#.#.#####.#######.#######.#.#.#.#######.###.#.#####.#.#####.#.#.#.###.#.###.#.#",
"#...#.#...#.#.....#...#...#.#...#.......#.#...#...#...#.....#.#.#.#.....#.....#.#",
"###.#.#.#.#.#####.#####.#.#.###########.#.#.###.#.#.###.###.###.#.#######.#####.#",
"#...#...#.#.........#...#...#...#.......#.#.#...#.#.#.#...#.....#...#...#...#...#",
"#.#######.#########.###.#######.#.#########.#.###.#.#.#.#####.###.#.#.#.###.#.#.#",
"#.#.#.....#.......#.#...#.......#.#.#...#...#...#...#...#...#.#...#.#.#...#.#.#.#",
"#.#.#.#####.#####.#.#.###.#######.#.#.#.#.#####.#####.###.#.###.###.#.#####.###Z#",
"#...#.........#...#...#.#.........#..k#.#.#.....#.......#.#...#...#...#.....#...#",
"###############.#.#####.#.#########.###.#.#.#############.###.###.#####.#####.#.#",
"#...N...#...#...#.#...#...#.#...#...#...#.#.............#.#.......#...#.#....b#.#",
"#.#####.#.#.#.###.###.#.###.#.#.#.###.#.#.#############.#.#########.#.#.###.###.#",
"#.#.......#.#...#.....#.#...#.#...#...#.#.#...#.......#.#...#.....#.#.#.....#...#",
"#.#########.###.#######.#.#.#.#####.###.#.#.#.#####.###.###.#.###.#.#.#######.###",
"#.#...V.#.#.H.#.#.......#.#.#.....#...#.#...#.#...#.........#...#...#.......#...#",
"#.#.###.#.###.#.#.#######.#####.#####.###.###.#.#.###.#####.###.#########.#####.#",
"#.....#.#...#.#.#.#.......#.....#...#...#.#...#.#...#.#...#.#...#.......#.....#.#",
"#.#####.#.###.#.#.#######.#.#####.#.###.###.#.#.###.###.#.###.###.#####.###.#.#.#",
"#.#.#...#..a....#...#...#...#.....#...#.#...#.#...#.....#.....#.#.....#..h..#.#.#",
"#.#.#.#############.#.#.#####.#######.#.#.#######.#############.#####.#########A#",
"#...#.................#.......#.............................X.......#...........#",
"#######################################.@.#######################################",
"#.D.....#.....#.......#.....#.........................#.....#.......#.#...#...#.#",
"#.###.#.#.#.#.#.#####.#.###.#.#.#######.#.###########.#.#.#.#.#####.#.#I#.#.#.#.#",
"#i#...#.#.#.#...#.....#.#...#.#x......#.#.#.......#...#.#.#...#.......#.#...#.#.#",
"###.###.###.#.#####.###.#.###.#######.#.#.###.###.#.#.#.#.#####.#######.#####.#.#",
"#...#.......#.#...#.#...#...#.#.#.....#.#.....#.#.#.#.#.#v....#.#...#...#d..#...#",
"#.#######.#####.#.#.#.#####.#.#.#.#####.#######.#.#.###.#####.#.#.###.###.#####.#",
"#.#.....#.#....u#.#.#...#...#...#.#.#...#.#...#...#.#...#.....#.#.#...#.........#",
"#.#.###.#.#.#####.#.###.#.#####.#.#.#.###.#.#.#.###.#.###.#####.#.#.###.#########",
"#.S.#.#.#.#.....#.#...#.#...#...#.#.#.#.#...#.....#.#...#...#.....#...#...#..s..#",
"#.###.#.#.#.#####.#.###.###.#.###.#.#.#.#.#########.#.#####.#########.###.#####.#",
"#.#...#.#.#.#.....#.#...#...#.#.#.#.#...#.....#...#...#...#n..#.P...#.#.#.......#",
"#.#.#.#.###.#.#####.#.###.###.#.#.#.###.#######.#.#####.#.###.#.###.#.#.#######.#",
"#...#.#.....#.....#.#.#...#.....#.#...#.#...#...#.....#.#...#.#.#.#...#.......#.#",
"#####.###########.#.#.###.#######.#.###.#.#.#.#######.#.###.#.#.#.#########.#.#U#",
"#.....#.......#...#.#...#.#.......#.....#.#...#.....#...#.....#.#...........#.#.#",
"#.#########.#.#.###.###.#.#.#######.#####.#####.#.###.#####.###.#.#######.#####.#",
"#.#.......#.#.#.#..w#...#...#...#...#.K.#...#.#.#.....#...#.#...#.#.#...#.#.....#",
"#.#.#####.#.#.#.###.#.#######.###.###.#.#.#.#.#.#######.#.###.###.#.#.#.#.#.#####",
"#...#..p....#.#...#.#...#...#...#.....#.#.#.#.#...#.....#...#...#.#...#...#.....#",
"#.###########.###.#.###.#.#.#R#.#######.#.#.#.###.#.#######.###.#.###.#########.#",
"#.#.......#.....#.#.#...#.#.#.#.......#.#.#.#.....#.#.#.....#.#.#...#.#.......#.#",
"#.#.#####.#######.#.#####M###.#.#####.#.#.#.###.###.#.#.#####.#W#.#.###.#.###.#.#",
"#.#.#.#.........#.#.#...#...#.#...#..m#.#.#...#.#...#.#.#...#j..#.#.#...#.#...#.#",
"#.#.#.#.#######.#.#.#.#.###.#.###.#####.#.###.###.###.#.#.#.#######.#.###.#.###.#",
"#.#.#.....#...#...#...#...#...#...#.....#.#.#.....#...#...#.........#.#...#.Q.#.#",
"#.#.#####.#.#.###########.#.###.#.#.#####.#.#######.#.#####.###.#####.#.#.#####.#",
"#.#.....#.#.#.........#...#.#...#.#.#...#...#.......#.#.#...#.#.#.G...#.#.#...#.#",
"#######.###.#########.#J#####L###.#.#.#.###.###.#.###.#.#.###.#.#.#####.###.#.#.#",
"#.....#.......#...#...#.#...#.#...#...#.#.#...#.#.#.....#.#...#.#.#...#.....#.Y.#",
"#B###.#######.###.#.###.#.#.#.#########.#.###.#.#.#######.#.###.#.#.#############",
"#.#...#...#...#...#...#l..#...#.....#...#.#...#.#.......#.#.....#.#.........#...#",
"#.###.#.#.#.###.#####.#######.#.###.#.###.#.###.#######.#.#####.#.#.###.###.#.###",
"#...#...#.#.....#...#...#...#.#.#.#...#.#.#.#...#.......#.....#.#.#...#.#...#f..#",
"#.#.#####.#.#####.#.###.#.#.#.#.#.#####.#.#.#####.#####.#####.###.#####.#.#####.#",
"#.#.....#.#.#.....#.#...#r#...#.....#...#.#.....#.#...#.#...#..o#.#.....#.#.....#",
"#.#####.#.###.#####.#.#.###########.#.#.#.#####.#.#.###.###.###.#.#.#####.#.#.#.#",
"#...#.#.#.....#z..#...#.#.....#.....#.#.#c....#.#.#...#.....#...#...#....t#.#.#.#",
"###.#.#.#######.#.#######.###.#.#######.#.#.###.#.#.#.#####.#.#######.#######.#.#",
"#.....#.........#...........#...........#.#.......#.#.......#.................#.#",
"#################################################################################"
];

/*
Shortest paths are 136 steps;
one is: a, f, b, j, g, n, h, d, l, o, e, p, c, i, k, m
*/
const example136 = [
"#################",
"#i.G..c...e..H.p#",
"########.########",
"#j.A..b...f..D.o#",
"########@########",
"#k.E..a...g..B.n#",
"########.########",
"#l.F..d...h..C.m#",
"#################"
];

function findStart(inputMap)
{
    let x=0;
    let y=0;
    while (y < inputMap.length){
        let row = inputMap[y];
        for (x=0; x<row.length; ++x){
            if (row[x] == '@'){
                return {x, y};
            }
        }
        ++y;
    }

    return {x, y}
}

function findAllKeys(inputMap)
{
    let keys = {};
    let x=0;
    let y=0;
    while (y < inputMap.length){
        let row = inputMap[y];
        for (x=0; x<row.length; ++x){
            if(/[a-z]/.test(row[x])){
                keys[row[x]] = {x, y}
            }
        }
        ++y;
    }

    return keys;
}

function findNeighbours(pos, inputMap)
{
    let neighbours = [];

    if (pos.y > 0 && inputMap[pos.y-1][pos.x] != '#'){
        neighbours.push({x: pos.x, y: pos.y-1})
    }
    if (pos.y+1 < inputMap.length && inputMap[pos.y+1][pos.x] != '#'){
        neighbours.push({x: pos.x, y: pos.y+1})
    }
    if (pos.x > 0 && inputMap[pos.y][pos.x-1] != '#'){
        neighbours.push({x: pos.x-1, y: pos.y})
    }
    if (pos.x+1 < inputMap[pos.y].length && inputMap[pos.y][pos.x+1] != '#'){
        neighbours.push({x: pos.x+1, y: pos.y})
    }
    return neighbours;
}

function printPos(pos)
{
    return "" + pos.x + "," + pos.y;
}

// Given a start position, a set of held keys and an inputMap,
// return the keys we can reach and the minimum distance to each one.
function findAvailableKeys(start, keys, inputMap, visited={}, distance=0)
{
    // track where we have been so we don't backtrack.
    visited[printPos(start)] = distance;

    let foundKeys = {}

    // Keep searching until we hit a wall or a locked door.
    let neighbours = findNeighbours(start, inputMap);
    for (let neighbour of neighbours){
        if (!(printPos(neighbour) in visited)){
            let keepGoing = true;

            let el = inputMap[neighbour.y][neighbour.x];
            // check lowercase letter for key
            if(/[a-z]/.test(el)){
                if (!(el in keys)){
                    // haven't seen this key before so pick it up
                    foundKeys[el] = distance+1;
                    // stop because we want to explore paths from here.
                    keepGoing = false;
                }
            }
                
            // check uppercase letter for door
            if(/[A-Z]/.test(el)){
                // Check if we have the key
                if (!(el.toLowerCase() in keys)){
                    keepGoing = false;
                }
            }
            if (keepGoing){
                let nextKeys = findAvailableKeys(neighbour, keys, inputMap, visited, distance+1);
                foundKeys = {...foundKeys, ...nextKeys}
            }
        }
    }

    return foundKeys;
}

function buildCandidates(keys, keysHeld, allKeys)
{
    let candidatePaths = [];
    
    for (let key of Object.keys(keys)){
        let stepsSoFar = keys[key];
        
        if (stepsSoFar > 0){
            let cobj = {
                stepsSoFar: keys[key],
                keysHeld: {...keysHeld},
                pos: allKeys[key]
            }
            cobj.keysHeld[key] = keys[key];
            candidatePaths.push(cobj);

        }
    }
    return candidatePaths;
}

// Solves the given map and returns the minimum steps.
function solve(inputMap)
{
    let allKeys = findAllKeys(inputMap);
    console.log("found " + allKeys.length + " keys");

    let start = findStart(inputMap);
    console.log("start = " + printPos(start));
    
    //go down each path until all keys are found
    let keys = {};
    keys = findAvailableKeys(start, keys, inputMap);
    console.log(JSON.stringify(keys));

    let candidatePaths = buildCandidates(keys, {}, allKeys);

    console.log(JSON.stringify(candidatePaths))

    let solution = {stepsSoFar: 1000000000}
    const totalKeys = Object.keys(allKeys).length;

    while(candidatePaths.length > 0){
        let nextCandidates = [];
        for (let candidate of candidatePaths){
            keys = findAvailableKeys(candidate.pos, candidate.keysHeld, inputMap, {}, candidate.stepsSoFar);
            let potentialNextCandidates = buildCandidates(keys, candidate.keysHeld, allKeys)
            for (let nextCandidate of potentialNextCandidates){
                if (nextCandidate.stepsSoFar > solution.stepsSoFar){
                    // abort as we've already found a better path
                } else if (Object.keys(nextCandidate.keysHeld).length === totalKeys){
                    // done
                    if (nextCandidate.stepsSoFar < solution.stepsSoFar){
                        solution = nextCandidate;
                    }
                } else {
                    // Explore from this location
                    nextCandidates.push(nextCandidate);
                }
            }
        }
        candidatePaths = nextCandidates;
        console.log('candidate paths = ' + JSON.stringify(candidatePaths))
    }

    console.log(JSON.stringify(solution))
    return solution.stepsSoFar;
}

const example8=[
"#########",
"#b.A.@.a#",
"#########"
];

const example86=[
"########################",
"#f.D.E.e.C.b.A.@.a.B.c.#",
"######################.#",
"#d.....................#",
"########################"
]

let minSteps = solve(example136);
console.log(minSteps);

