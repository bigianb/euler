const program_in = "3,225,1,225,6,6,1100,1,238,225,104,0,1101,32,43,225,101,68,192,224,1001,224,-160,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1001,118,77,224,1001,224,-87,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,1102,5,19,225,1102,74,50,224,101,-3700,224,224,4,224,1002,223,8,223,1001,224,1,224,1,223,224,223,1102,89,18,225,1002,14,72,224,1001,224,-3096,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,34,53,225,1102,54,10,225,1,113,61,224,101,-39,224,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1101,31,61,224,101,-92,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1102,75,18,225,102,48,87,224,101,-4272,224,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1101,23,92,225,2,165,218,224,101,-3675,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1102,8,49,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,226,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,344,1001,223,1,223,108,677,226,224,102,2,223,223,1006,224,359,1001,223,1,223,7,226,226,224,1002,223,2,223,1005,224,374,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,419,1001,223,1,223,108,226,226,224,102,2,223,223,1006,224,434,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,449,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,1008,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,509,101,1,223,223,8,226,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,539,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,554,101,1,223,223,1108,677,677,224,102,2,223,223,1006,224,569,101,1,223,223,1107,226,677,224,102,2,223,223,1005,224,584,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,599,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,614,1001,223,1,223,7,226,677,224,1002,223,2,223,1005,224,629,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,644,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,659,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226".split(',');

function run(program, input) {
    let mem = [];
    for (let x of program) {
        mem.push(Number(x));
    }

    let inputIdx = 0;

    let i = 0;
    while (mem[i] != 99) {
        let oplen = 1;

        let fullCode = mem[i];
        let opcode = fullCode % 100;
        let sFullcode = new Intl.NumberFormat('en-GB', {
            minimumIntegerDigits: 5,
            maximumFractionDigits: 0,
            useGrouping: false
        }).format(fullCode);

        // 1 == immediate mode
        let aMode = sFullcode[0];
        let bMode = sFullcode[1];
        let cMode = sFullcode[2];

        switch (opcode) {
            case 0:
                oplen = 4;
                break;
            case 1: {
                let c = cMode == '1' ? mem[i + 1] : mem[mem[i + 1]];
                let b = bMode == '1' ? mem[i + 2] : mem[mem[i + 2]];
                mem[mem[i + 3]] = c + b;
                oplen = 4;
            }
            break;
        case 2: {
            let c = cMode == '1' ? mem[i + 1] : mem[mem[i + 1]];
            let b = bMode == '1' ? mem[i + 2] : mem[mem[i + 2]];
            mem[mem[i + 3]] = c * b;
            oplen = 4;
        }
        break;
        case 3:
            mem[mem[i + 1]] = input[inputIdx];
            inputIdx += 1;
            oplen = 2;
            break;
        case 4: {
            let c = cMode == '1' ? mem[i + 1] : mem[mem[i + 1]];
            console.log("" + c + " at address " + i);
            oplen = 2;
        }
        break;
        case 5: {
            // jump if true
            let c = cMode == '1' ? mem[i + 1] : mem[mem[i + 1]];
            let b = bMode == '1' ? mem[i + 2] : mem[mem[i + 2]];
            if (c == 0) {
                oplen = 3;
            } else {
                oplen = b - i;
            }
        }
        break;
        case 6: {
            // jump if false
            let c = cMode == '1' ? mem[i + 1] : mem[mem[i + 1]];
            let b = bMode == '1' ? mem[i + 2] : mem[mem[i + 2]];
            if (c != 0) {
                oplen = 3;
            } else {
                oplen = b - i;
            }
        }
        break;
        case 7: {
            /*
            Opcode 7 is less than: if the first parameter is less than the second parameter,
            it stores 1 in the position given by the third parameter. Otherwise, it stores 0.
            */
           oplen = 4;
           let c = cMode == '1' ? mem[i + 1] : mem[mem[i + 1]];
           let b = bMode == '1' ? mem[i + 2] : mem[mem[i + 2]];
           if (c < b){
            mem[mem[i + 3]] = 1;
           } else {
            mem[mem[i + 3]] = 0;
           }
        }
        break;
        case 8: {
            /*
            Equals
            */
           oplen = 4;
           let c = cMode == '1' ? mem[i + 1] : mem[mem[i + 1]];
           let b = bMode == '1' ? mem[i + 2] : mem[mem[i + 2]];
           if (c == b){
            mem[mem[i + 3]] = 1;
           } else {
            mem[mem[i + 3]] = 0;
           }
        }
        break;
        default:
            console.error('unknown opcode: ' + opcode + ' at index ' + i);
        }
        i += oplen;
    }
    return mem[0]
}


run(program_in, [5])

console.log('done');